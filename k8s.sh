#! /bin/bash

help () {
  cat << EOF
     -mode master|node  
        #必要参数：安装k8s master ,还是node 节点
     -master_host IP
        #必要参数：master 中controller-manager scheduler 需要连接api
        #          node 中kubelete 需要连接api
     -node_host IP
        #node 模式下，必须需要此参数
     -etcd_host IP
        #必要参数，node节点网络flannel需要连接
         master api 需要连接
     -bincode_dir  k8s.tar.gz
        #必要参数，k8s 编译好的代码包

EOF
   exit;
}

panduan () {
     if [[ $? == 0 ]]; then
        :
     else
         echo $1;
         exit;
     fi

}


docker_conf () {
    
   cat <<EOF > /etc/docker/daemon.json
{
  "registry-mirrors":  ["https://xxxxx.mirror.aliyuncs.com"],
  "insecure-registries":["172.23.2.97:5000"],
  "log-level": "debug"
}
EOF

}

kubelet_conf () {
 
    \cp amd64/kubelet /usr/bin/kubelet 
     mkdir -p /var/lib/kubelet 
     mkdir -p /etc/kubernetes 

   cat <<EOF >/usr/lib/systemd/system/kubelet.service
[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=docker.service
Requires=docker.service

[Service]
WorkingDirectory=/var/lib/kubelet
EnvironmentFile=/etc/kubernetes/kubelet
ExecStart=/usr/bin/kubelet \$KUBELET_ARGS
Restart=on-failure
KillMode=process

[Install]
WantedBy=multi-user.target
EOF

  cat <<EOF >/etc/kubernetes/kubelet
KUBELET_ADDRESS="--address=$MasterIp"
KUBELET_HOSTNAME="--hostname-override=$NodeIp"
KUBELET_API_SERVER="--api-servers=http://$MasterIp:8080"
KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"
KUBELET_ARGS=" --cluster-dns=10.254.0.10 --cluster-domain=cluster.local.  --resolv-conf=/etc/resolv.conf --enable-server=true --enable-debugging-handlers=true --fail-swap-on=false --kubeconfig=/var/lib/kubelet/kubeconfig --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice --cgroup-driver=systemd"
EOF

  cat <<EOF > /var/lib/kubelet/kubeconfig
apiVersion: v1
kind: Config
users:
- name: kubelet
clusters:
- name: kubernetes
  cluster:
    server: http://$MasterIp:8080
contexts:
- context:
    cluster: kubernetes
    user: kubelet
  name: service-account-context
current-context: service-account-context
EOF


}

flannel_conf () {
  sed -i "s/127.0.0.1:2379/$EtcdIp:2379/g" /etc/sysconfig/flanneld
}

sys_conf () {
    systemctl stop firewalld.service 1>/dev/null 2>/dev/null
    systemctl  disable firewalld.service
    
    sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
    setenforce 0
    cat <<EOF > /etc/security/limits.conf
* soft nofile 65535
* hard nofile 65535
* soft nproc 600000
* hard nproc 600000
* soft nofile 600000
* hard nofile 600000
* soft nproc 600000
* hard nproc 600000
* soft nofile 600000
* hard nofile 600000
* soft nproc 600000
* hard nproc 600000
* soft nofile 600000
* hard nofile 600000
* soft nproc 600000
* hard nproc 600000
* soft nofile 600000
* hard nofile 600000

EOF

    case $Mode in
         "master")
             cat <<EOF > /etc/sysconfig/iptables
# Generated by iptables-save v1.4.21 on Fri Oct 18 11:28:13 2019
*filter
:INPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 6443 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j ACCEPT
COMMIT
# Completed on Fri Oct 18 11:28:13 2019
EOF
             ;;
         "node")
             cat <<EOF > /etc/sysconfig/iptables
# Generated by iptables-save v1.4.21 on Fri Oct 18 11:28:13 2019
*filter
:INPUT ACCEPT [0:0]
-A INPUT -s $MasterIp/32 -p udp --dport 8285 -j ACCEPT
-A INPUT -s $MasterIp/32 -p tcp --dport 10250 -j ACCEPT
-A INPUT -s $MasterIp/32 -p tcp --dport 10255 -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j ACCEPT
COMMIT
# Completed on Fri Oct 18 11:28:13 2019
EOF
             ;;
    esac
     
    systemctl  restart iptables.service
    systemctl  enable iptables.service
}

proxy_conf () {
    \cp amd64/kube-proxy /usr/bin;

    cat <<EOF >/usr/lib/systemd/system/kube-proxy.service
[Unit]
Description=Kubernetes Kube-Proxy Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target
 
[Service]
EnvironmentFile=/etc/kubernetes/config
EnvironmentFile=/etc/kubernetes/proxy
ExecStart=/usr/bin/kube-proxy \
            \$KUBE_LOGTOSTDERR \
            \$KUBE_LOG_LEVEL \
            \$KUBE_MASTER \
            \$KUBE_PROXY_ARGS
Restart=on-failure
LimitNOFILE=65536
 
[Install]
WantedBy=multi-user.target

EOF

    cat <<EOF >/etc/kubernetes/config 
GTOSTDERR="--logtostderr=true"
KUBE_LOG_LEVEL="--v=0"
KUBE_ALLOW_PRIV="--allow_privileged=false"
KUBE_MASTER="--master=http://$MasterIp:8080"

EOF

    cat <<EOF >/etc/kubernetes/proxy
KUBE_PROXY_ARGS="--proxy-mode=iptables"
EOF

}

coredns_conf () {
    docker pull docker.io/coredns/coredns:1.2.6
    cat <<EOF >Dockerfile
FROM docker.io/coredns/coredns:1.2.6
ADD ./ca.pem /etc/ssl/certs
EOF
    docker build -t k8s.gcr.io/coredns:1.2.6 .
}

node  () {
    yum -y install *rhsm* docker flannel wget iptables iptables-services
    yum update -y
    sys_conf 

    [[ -f  python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm ]]   ||   wget http://mirror.centos.org/centos/7/os/x86_64/Packages/python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm 
    rpm2cpio python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm | cpio -iv --to-stdout ./etc/rhsm/ca/redhat-uep.pem | tee /etc/rhsm/ca/redhat-uep.pem
    rm -rf  python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm
    docker_conf;
    systemctl restart docker || panduan "docker 启动报错，请手动排查systemctl restart docker !!!!!!! " 
    docker images |grep 'registry.access.redhat.com/rhel7/pod-infrastructure' 1>/dev/null 2>/dev/null ||  docker pull registry.access.redhat.com/rhel7/pod-infrastructure:latest

    docker pull docker.io/chenliujin/pause:3.1
    docker tag  docker.io/chenliujin/pause:3.1 k8s.gcr.io/pause:3.1  
    
    docker pull docker.io/googlecontainer/kubernetes-dashboard-amd64:v1.5.1   
    docker tag docker.io/googlecontainer/kubernetes-dashboard-amd64:v1.5.1 gcr.io/google_containers/kubernetes-dashboard-amd64:v1.5.1   

 
    tar zxvf $BincodeDir/k8s.tar.gz 1>/dev/null 2>/dev/null ||  panduan "$BincodeDir/k8s.tar.gz no file !!!!!";
    kubelet_conf; 
    flannel_conf;
    proxy_conf;
    systemctl daemon-reload
    systemctl restart kubelet.service 
    systemctl  restart flanneld 
    systemctl restart docker
    systemctl start kube-proxy
    systemctl enable flanneld.service
    systemctl enable kubelet.service
    systemctl enable docker.service
    systemctl enable kube-proxy.service
}

CA () {
   mkdir -p /etc/kubernetes/ssl && cd /etc/kubernetes/ssl
   openssl genrsa -out ca-key.pem 2048
   openssl req -x509 -new -nodes -key ca-key.pem -days 10000 -out ca.pem -subj "/CN=kube-ca"
   cat <<EOF > openssl.cnf
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = kubernetes
DNS.2 = kubernetes.default
DNS.3 = kubernetes.default.svc
DNS.4 = kubernetes.default.svc.cluster.local
IP.1 = 10.254.0.1  
IP.2 = $MasterIp  
EOF
   
    openssl genrsa -out apiserver-key.pem 2048
    openssl req -new -key apiserver-key.pem -out apiserver.csr -subj "/CN=kube-apiserver" -config openssl.cnf  
    openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out apiserver.pem -days 3650 -extensions v3_req -extfile openssl.cnf
}

k8s_master_api_conf () {
     \cp amd64/kubectl /usr/bin/
     \cp amd64/kube-apiserver  /usr/bin/
      mkdir -p /etc/kubernetes     
      mkdir -p /var/log/kubernets/apiserver
      openssl genrsa -out /etc/kubernetes/serviceaccount.key 2048 || panduan "缺少openssl 命令，请手动解决 ！！！"
     cat <<EOF >/usr/lib/systemd/system/kube-apiserver.service
[Unit]
Description=Kubernetes API Server
After=etcd.service
Wants=etcd.service

[Service]
EnvironmentFile=/etc/kubernetes/apiserver
ExecStart=/usr/bin/kube-apiserver  \
        \$KUBE_ETCD_SERVERS \
        \$KUBE_API_ADDRESS \
        \$KUBE_API_PORT \
        \$KUBE_SERVICE_ADDRESSES \
        \$KUBE_ADMISSION_CONTROL \
        \$KUBE_API_LOG \
        \$KUBE_API_ARGS 
Restart=on-failure
Type=notify
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF

    cat <<EOF >/etc/kubernetes/apiserver
KUBE_API_ADDRESS="--insecure-bind-address=0.0.0.0"
KUBE_API_PORT="--insecure-port=8080"
KUBE_ETCD_SERVERS="--etcd-servers=http://$EtcdIp:2379"
KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range=10.254.0.0/16"
KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota"
KUBE_API_LOG="--logtostderr=false --log-dir=/var/log/kubernets/apiserver --v=2"
KUBE_API_ARGS="--tls-cert-file=/etc/kubernetes/ssl/apiserver.pem --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem --client-ca-file=/etc/kubernetes/ssl/ca.pem  --authorization-mode=AlwaysAllow --service-account-key-file=/etc/kubernetes/serviceaccount.key"

EOF

   systemctl enable kube-apiserver.service
   systemctl start kube-apiserver.service

}

k8s_controller_conf () {
    \cp amd64/kube-controller-manager  /usr/bin/

     cat <<EOF >/usr/lib/systemd/system/kube-controller-manager.service
[Unit]
Description=Kubernetes Scheduler
After=kube-apiserver.service 
Requires=kube-apiserver.service

[Service]
EnvironmentFile=-/etc/kubernetes/controller-manager
ExecStart=/usr/bin/kube-controller-manager \
        \$KUBE_MASTER \
        \$KUBE_CONTROLLER_MANAGER_ARGS
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target

EOF

   cat <<EOF >/etc/kubernetes/controller-manager
KUBE_MASTER="--master=http://$MasterIp:8080"
KUBE_CONTROLLER_MANAGER_ARGS="--service-account-private-key-file=/etc/kubernetes/serviceaccount.key"

EOF
 
   systemctl enable kube-controller-manager.service
   systemctl start kube-controller-manager.service

}

k8s_scheduler_conf () {
    \cp amd64/kube-scheduler  /usr/bin/
     mkdir -p /var/log/kubernetes/scheduler

    cat <<EOF >/usr/lib/systemd/system/kube-scheduler.service
[Unit]
Description=Kubernetes Scheduler
After=kube-apiserver.service 
Requires=kube-apiserver.service

[Service]
User=root
EnvironmentFile=-/etc/kubernetes/scheduler
ExecStart=/usr/bin/kube-scheduler \
        \$KUBE_MASTER \
        \$KUBE_SCHEDULER_ARGS
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target

EOF

  cat <<EOF >/etc/kubernetes/scheduler
KUBE_MASTER="--master=http://$MasterIp:8080"
KUBE_SCHEDULER_ARGS="--logtostderr=true --log-dir=/var/log/kubernetes/scheduler --v=2"

EOF

    systemctl enable kube-scheduler.service
    systemctl start kube-scheduler.service

}

master () {
    yum -y install  iptables iptables-services
    yum update -y
    sys_conf
    workdir=`pwd`;
    CA; 
    cd $workdir;
    tar zxvf $BincodeDir/k8s.tar.gz 1>/dev/null 2>/dev/null ||  panduan "$BincodeDir/k8s.tar.gz no file !!!!!";
    k8s_master_api_conf;
    k8s_controller_conf;
    k8s_scheduler_conf;
}

while [[ -n $2 ]]
do
    case $1 in
        "-mode")
          Mode=$2;
         ;;
        "-master_host")
          MasterIp=$2;
        ;;
        "-node_host")
          NodeIp=$2;
        ;;
        "-etcd_host")
          EtcdIp=$2;
        ;;
        "-bincode_dir")
           BincodeDir=$2;
        ;;
        *)
        help;
        ;;
    esac
    shift 2;
done

 [[ -n $EtcdIp ]]  ||  echo "缺参：-etcd_host ip !!!"  ;
 [[ -n $BincodeDir ]]  ||  echo "缺参：-bincode_dir / !!!"  ;
 [[ -n $Mode ]]  ||  echo "缺参：-mode master|node !!!"  ;
 [[ -n $MasterIp ]]  ||  panduan "缺参：-master_host IP !!!"  ;
 

case $Mode in 
    "master")
        master;
        echo "请将 根证书：/etc/kubernetes/ssl/ca.pem 拷贝到给node 当中！！！！"
        echo tom >/dev/tcp/$EtcdIp/2379 || echo "WARN: etcd's port:2379  is not listen !!!"
    ;;
    "node")
        [[ -n $NodeIp ]]  ||  panduan "缺参：-node_host IP !!!"  ;
        node;
        [[ -f ca.pem ]] || echo "警告： 缺少ca.pem证书，coredns 服务需要它与 api 通讯，编排的pod将不能进行域名解析 ！！！！！！"
        scp root@$MasterIp:/etc/kubernetes/ssl/ca.pem  .
        [[ -f ca.pem ]] && coredns_conf;
        echo tom >/dev/tcp/$MasterIp/8080 || echo "WARN: K8S'S api port:8080 is not listen !!!"
        echo tom >/dev/tcp/$EtcdIp/2379 || echo "WARN: etcd's port:2379  is not listen !!!"
        echo "please at master: $MasterIp 's /etc/hosts add " `hostname` $NodeIp ;
    ;;
    *)
    help
    ;;
esac
